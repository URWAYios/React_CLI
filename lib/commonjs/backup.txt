import { NativeModules, Platform } from 'react-native';
//import { config } from '../../../config';
import { Alert ,View,Text,Modal,Button ,StyleSheet } from 'react-native';
import sha256 from 'js-sha256';
import { useState,useEffect } from 'react';
import queryString from 'query-string';

import { publicIpv4 } from 'public-ip';

import CryptoJS from 'crypto-js';
const { Applepay } = NativeModules;
//import { useNavigation } from '@react-navigation/native';
import { WebView } from 'react-native-webview';

export const useUrway = () => {

  const [modalVisible, setModalVisible] = useState(false);

  const showModal = () => {
    setModalVisible(true);
  };

  const hideModal = () => {
    setModalVisible(false);
  };
  
  //const navigation = useNavigation();
      const processPayment = (amount : String, trackId : String, label: String, merchantIdentifier: String) => {
        return new Promise((res, rej) => {
          if (Platform.OS === 'android') {
            throw new Error('Apple Pay is not supported on Android devices');
          }
          // if (!config) {
          //   rej('There is no config file in the root directory');
          //   return;
          // }
          let valuesToBeHashed = `${trackId}|${"config.terminalId"}|${"config.password"}|${"config.key"}|${amount}|SAR`;
          let hash = CryptoJS.SHA256(valuesToBeHashed).toString();
          Applepay.createApplePayToken(merchantIdentifier, String(amount), label, async (err: any , token : any) => {
            if (err) {
              Alert.alert('Error', `${err}`, [{
                text: 'ok',
                style: 'default'
              }]);
              rej(`Error coming from iOS: ${err}`);
            }
            let paymentRequest = generatePaymentRequest(token, hash, amount, trackId, rej);
           console.log(" PAYMENT REQ "+paymentRequest)
            try {
              const response = await fetch("config.requestUrl", {
                method: 'POST',
                headers: {
                  'Accept': 'application/json',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(paymentRequest)
              });
              const result = await response.json();
             // setFe(result);
              res(result);
              console.log("In Apple Pay Token" + result);
            } catch (e) {
              rej('Something went wrong while sending the request');
            }
          });
        });
      };
      const generatePaymentRequest = (token : String, hash : String, amount : String, trackId : String, rej : any) => {
        if (token) {
          if (token.includes('Simulated', 100)) {
          //   Alert.alert('Error', 'Transaction was coming from a simulator', [{
          //     text: 'ok',
          //     style: 'default'
          //   }]);
             rej('Transaction was coming from a simulator');
          //   return;
           }
        }
        const paymentRequest = 
        {
          trackid: trackId,
          terminalId: "config.terminalId",
          action: '1',
          merchantIp: '10.10.10.10',
          password: "config.password",
          amount: amount,
          requestHash: hash,
          country: 'SA',
          currency: 'SAR',
          customerIp: '10.10.10.10',
          applepayId: 'applepay',
          udf1: null,
          udf2: null,
          udf3: null,
          udf4: 'ApplePay',
          udf5: token
        };
        return paymentRequest;
      };
     
    const processTransactionPayment = (amount : String, trackId : String, label: String, merchantIdentifier: String) => {

  console.log("In ParocessPayment");
  return new Promise(async (res, rej) => {    
  //let valuesToBeHashed = '${trackId}|${"config.terminalId"}|${"config.password"}|${"config.key"}|${amount}|SAR';
  let valuesToBeHashed = 'junaid|testterm30|password|436b1642fe4e609c12a1cecc52c0f9de7202936f284914eb51fc770ec794c390|5.618|SAR';

  const hash = sha256.sha256(valuesToBeHashed);

  console.log('SHA-256 Hash:', hash);
  //let hash = CryptoJS.SHA256(valuesToBeHashed).toString();

  const paymentRequest = {
    
      //transid:"2411618290661793556",
      amount: "5.618",
      addres: "thane",
      customerIp: "10.10.11.66",
      city: amount,
      state:"mh",
      zipCode:trackId,
      trackid: "junaid",
      terminalId: "testterm30",
      password: "password",
      action: "1",
      merchantIp: "10.10.10.109",
      requestHash: hash,
      country: "IN",
      currency: "SAR",
      customerEmail: "rohan.chavan@concertosoft.com",
      cardHolderName : label,
      instrumentType: "DEFAULT",
      udf1: merchantIdentifier
   
  };
  try {
    const response = await fetch("http://10.10.11.66:8080/PGService/transaction/jsonProcess/JSONrequest",
     { method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(paymentRequest)
    });
    const result = await response.json();
    console.log(" RESULT "+result);
  
   
    res(result);
  } catch (e) {
    rej('Something went wrong while sending the request');
  }
  });
    }

    // const renderWebView = () => {
    //   if (isWebViewVisible && webViewUrl) {
    //     return (
    //       <WebView
    //         source={{ uri: webViewUrl }}
    //         style={{ flex: 1 }}
    //         onNavigationStateChange={handleNavigationStateChange}
    //       />
    //     );
    //   }
    //   return null; // Or return a placeholder/loader
    // };
  
    // const handleNavigationStateChange = (navState : any) => {
    //   // Example: if the user navigates to a certain URL, we can close the WebView or take some other action
    //   if (navState.url.includes('success')) {
    //     setIsWebViewVisible(false);
    //     Alert.alert('Payment Successful!');
    //   }
    //   if (navState.url.includes('fail')) {  
    //     setIsWebViewVisible(false);
    //     Alert.alert('Payment Failed');
    //   }
    // };

    const renderModal = () => {
      return (
        <Modal
          animationType="slide"
          transparent={true}
          visible={modalVisible}
          onRequestClose={() => {
            setModalVisible(!modalVisible);
          }}
        >
          <View style={styles.modalContainer}>
            <View style={styles.modalView}>
              <Text style={styles.modalText}>Hello from the Custom Modal!</Text>
              <Button
                title="Close Modal"
                onPress={() => setModalVisible(!modalVisible)}
              />
            </View>
          </View>
        </Modal>
      );
        }
   
    
    return {
        processPayment,
        processTransactionPayment,
        showModal,
        hideModal,
        renderModal
       };
    
      };
export const PluginApp = ( props: {
        onCloseModal( data: string): unknown ;  data: string | null | undefined ; onfromApplePay: boolean  }) =>
      {
        const [modalVisible, setModalVisible] = useState(true);
        const [urlddata, seturlDData ] = useState("");
        const [responsedata, setresponseData ] = useState("");
        // const [merchantip, setmerIPData ] = useState("");
        // const [ressHash, setresphash ] = useState(null);
        const reqparams:any  =(props.data);
        const requestdata=JSON.parse(reqparams);
        let urldata = '';
        let navUrl = ''; 
        let devicejson ={};
        // const reqparams = JSON.stringify({"trackid":"170735576","transid":"170735576","terminalId":"recterm","customerEmail":"pooja.thorat@concertosoft.com","address":"Mahape","city":"Mumbai","state":"Maharashtra","zipCode":"400071","customerName":"pooja thorat","cardHolderName":"pooja thorat","action":"1","instrumentType":"DEFAULT","merchantIp":"10.10.11.76","password":"password","currency":"SAR","country":"IN","amount":"1.00","udf2":"","udf3":"","udf1":"","udf5":"","udf4":"","requestHash":"716a83741f3bbbbe01209cd407da9f903084e66ca7af1932c35d6c99c5ab6d80","metaData":"{entry:entry1,entry2:entry2}"}
        // );
   
        //Creating Request Hash
        
        // useEffect(() => {
          
        // }, [ressHash]);
  
      useEffect(() => 
      {
       async function goForFetch() 
       {
          const txn_details = "" + requestdata.trackid + "|" + requestdata.terminalId + "|" + requestdata.password + "|" + requestdata.merchantkey + "|" + requestdata.amount +
          "|" + requestdata.currency + "";
          const hash = sha256.sha256(txn_details);

let ipadd= await publicIpv4();

console.log('SHA-256 Hash:', hash);
console.log('IP Add:', ipadd);
           
 //console.log(ip);
                 
          let fields = {};
          // let hasshh =  ressHash;
          console.log("hash : "+hash);
          // let appName = DeviceInfo.getSystemName();
  
        // if(Platform === 'android')
        // {
  
          devicejson = {
                                 'pluginName': "React Native ",
                                 'pluginVersion': '3.0',
                                 'pluginPlatform': "DeviceInfo.getDeviceType()",
                                 'deviceModel': "DeviceInfo.getModel()",
                                 'devicePlatform': "DeviceInfo.getSystemName()",
                                 'deviceOSVersion': "DeviceInfo.getSystemVersion()",
                       };
                            // }
                            // else{
                            //   devicejson = {
                            //     'pluginName': "React Native ",
                            //     'pluginVersion': '3.0',
                            //     'pluginPlatform': "DeviceInfo.getDeviceType()",
                            //     'deviceModel': "DeviceInfo.getModel()",
                            //     'devicePlatform': "DeviceInfo.getSystemName()",
                            //     'deviceOSVersion': 'DeviceInfo.getSystemVersion()',
                            // };
                            // }
  //   'transDate':moment().format("DD-MMM-YYYY"),  use this above
                             const json_devicedata = JSON.stringify(devicejson);
   console.log("Device INFo : "+json_devicedata);
          console.log("requestdata.action : "+requestdata.action);
          if(requestdata.action === '1'){
               fields = {
                 'trackid': requestdata.trackid,
                 'transid': "",
                 'terminalId': requestdata.terminalId,
                 'customerEmail': requestdata.email,
                 'customerName': requestdata.first_name + " " + requestdata.last_name,
                 "cardHolderName": requestdata.first_name + " " + requestdata.last_name,
                 'action': requestdata.action,
                
                 'merchantIp':ipadd,
                 'password': requestdata.password,
                 'currency':  requestdata.currency,
                 'country': requestdata.country,
                 'amount': requestdata.amount,
                 'udf2': requestdata.udf2,
                 'udf3': requestdata.udf3,
                 'customerIp': ipadd,
                 'udf1': "",
                 'udf5': "",
                 'udf4': "",
                 'metaData': requestdata.metadata,
                 'tokenizationType': 0,
                 'cardToken':requestdata.cardToken,
                 'requestHash': hash,
                 'deviceInfo' : json_devicedata
             };
            }
            
            else if(requestdata.action === '12'){
  
          
              if (requestdata.tokenizationType == 'A') {
                fields = {
                    'trackid': requestdata.trackid,
                    'transid': requestdata.trackid,
                    'terminalId': requestdata.terminalId,
                   
                    'customerEmail': requestdata.email,
                    'customerName': requestdata.first_name + " " + requestdata.last_name,
                    'action': requestdata.action,
                    'merchantIp': ipadd,
                    'password': requestdata.password,
                    'currency': requestdata.currency,
                    'country': requestdata.country,
                    'amount': requestdata.amount,
                    'udf2':  requestdata.udf2,
                    'udf3': requestdata.udf3,
                    'customerIp':ipadd,
                    'udf1': "",
                    'udf5': "",
                    'udf4': "",
                    'tokenizationType': 0,
                    'tokenOperation':requestdata.tokenizationType,
                    'metaData': requestdata.metadata,
                    'requestHash': hash,
                    'deviceInfo' : json_devicedata
                }
            }
           
            }
            else
           {
              fields = {
                'trackid': requestdata.trackid,
                'transid': requestdata.transid,
                'terminalId': requestdata.terminalId,
                'customerEmail': requestdata.email,
                'customerName': requestdata.first_name + " " + requestdata.last_name,
                "cardHolderName": requestdata.first_name + " " + requestdata.last_name,
                'action': requestdata.action,
                
                'merchantIp':ipadd,
                'password': requestdata.password,
                'currency':  requestdata.currency,
                'country': requestdata.country,
                'amount': requestdata.amount,
                'udf2': requestdata.udf2,
                'udf3': requestdata.udf3,
                'customerIp': ipadd,
                'udf1': "",
                'udf5': "",
                'udf4': "",
                'metaData': requestdata.metadata,
                'tokenizationType': 0,
                'cardToken':requestdata.cardToken,
                'requestHash': hash,
                'deviceInfo' : json_devicedata
            };
           }
            console.log("Request Param in go for Fetch " + JSON.stringify(fields));
            console.log("requestdata.requestUrl " + requestdata.requestUrl);
             let ress = ""; 
             
              const response = await fetch("http://10.10.11.66:8080/PGService/transaction/jsonProcess/JSONrequest", {
                method: 'POST',
                headers: {
                  'Accept': 'application/json',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(fields)
              });
              const result = await response.json();
             // setFe(result);
                 let urldecode = result.data;
                 console.log("RESPONSE TEST " + urldecode);
                 ress = JSON.stringify(urldecode);
               
                 if('targetUrl' in urldecode && urldecode['targetUrl'] !== null ){
                 console.log("Target URL available");
                 if (urldecode['payid'] != undefined)  
                 {
                    
                      let url = "";
                      if (urldecode['targetUrl'].includes('?paymentId=')) {
                      url = urldecode['targetUrl'] + urldecode['payid'];
                      } else {
                      url = urldecode['targetUrl'] + "?paymentid=" + urldecode['payid'];
                       }
                      console.log(" URL "+url);
                      urldata = url;
                      console.log(" urldata: "+urldata);
                                      
                      const createJson = JSON.stringify({
                      'hostedurl': url,
                        });
                     seturlDData(urldata);
                          
                      console.log("Create JSon "+createJson);
                     // ress = createJson;
                    //  setresponseData(ress)
                     
                 
                 
                 }
                 else
                 {
                   console.log("Target URL not available");
                //    setresponseData(ress);
         
                   onModalClose(ress); 
                 }
                 }
               
                  
                  console.log(" ++ "+ress);
                  return ress;
            // if(fromapple pay )
            // {
            //   gotobottomsheet()
  
            // }
            // els}e
            // {
             }
              goForFetch();  // Call the async function
                 },   []); 
   
    
      
  
     
  
       
        // console.log("Request" + reqparams);
       
         
        
        // const navigation=useNavigation();
  
        // React useeffect api call 
        // data read. url send to webview 
        //console.log("In Plugin");
  
        let dataM :any;
        const onNavigationStateChange1 = (navState: any)  => {
  
          if (navUrl !==  navState['url']) { 
            // let xyz = navState[url]
            navUrl  = navState['url'];
            console.log(" Nav URL "+navUrl);
            const responseObject = queryString.parse(navUrl);
             console.log("StringSplit Code "+responseObject['Result']);
            //  let queries = queryString.parse(this.props.location.search)
            if (responseObject['Result'] != "" &&  ( responseObject['Result'] === "Successful" || responseObject['Result'] === "Failure" || responseObject['Result'] === "UnSuccessful" ) )
            {
              console.log("RESULT "+ responseObject['Result']);
              if(responseObject['metaData'] != "" || responseObject['metaData'] != null )
              {
                    dataM = responseObject['metaData'];
  
                  console.log(" dataM "+dataM);
                  // var decryptdata=Base64.decode(dataM);
                  // console.log("decrypt"+ decryptdata);
                }
            var regex = /[?&]([^=#]+)=([^&#]*)/g,
            params :any= {},
            match:any;
          while (match = regex.exec(navUrl)) 
          {
            console.log("RESPONSE params[match[1]] " +match[1]);
            console.log("RESPONSE match[2] " +match[2]);
  
            if(match[1] == "metaData" && (match[2] != null || match[2] != ''))
            {
              console.log("RESPONSE match[2] METADATA  " +match[2]);
             // var decryptdata=Base64.decode(match[2]);
              //console.log("decrypt METADATA "+ decryptdata);
             // params[match[1]] =decryptdata;
             params[match[1]]=match[2];
            }
  
            else
            {
              params[match[1]] = match[2];
            }
          }
          console.log("RESPONSE Parames " +JSON.stringify(params));
          setresponseData(JSON.stringify(params));
          console.log("RESPONSE responsedata " +responsedata);
          onModalClose(JSON.stringify(params));
          // navigation.navigate('Receipt',{
          //   data:params
          // });
        
        }
           
          }
          else{
            console.log("RESULT is empty");
          }
        };
        
        // const handleRespdata=(e) => onModalClose(e);
  
        const onModalClose = (respparam : string) => {
          // let data1 = JSON.stringify(" {name: 'example from model', type: 'closed from child'} " );
          // let data = props.data;
         console.log("response1 "+ respparam);
        //  for (var key in respparam) {
        //   console.log("key",key);
        //   if(key === "result"){
           
        //        console.log("resultttt",responsedata[key]);
        //   }
        // }
          if(respparam === "" || respparam === "\"\"" )
          {
            //console.log("response1 "+ responsedata);
            setModalVisible(modalVisible);
          }
          else{
           console.log("response2 "+ responsedata);
            setModalVisible(!modalVisible);
            props.onCloseModal( respparam);
          }
       
        };
      
    console.log( "urldata"+ urldata);
         return (
        
          <View style={styles.container} >
             {/* <Text>Hi there </Text > */}
         
             <Modal
            animationType="slide"
            transparent={false}
            visible={modalVisible}
            
            onRequestClose={() => {
             
              setModalVisible(!modalVisible);
          }}>
            
  
            {/* <Button title='close' onPress={e => onModalClose(e)}></Button> */}
  
           {/* <Text style={styles.paragraph}>{props.data}</Text> */}             
          <WebView style={styles.modalView} 
              source = {{ uri:urlddata }}
              onNavigationStateChange = { onNavigationStateChange1 }
              // onLoadStart={(e) => {
              //   console.log("onLoad **");
              //   onModalClose(e , JSON.stringify(responsedata));
              // }}
            />
            {/* </View> */}
          </Modal>
          </View>
         );  
        }
const styles = StyleSheet.create({
        container: {
          flex: 1,
          justifyContent: 'center',
          backgroundColor: '#ecf0f1',
          padding: 8,
          alignItems: "center",
          marginTop: 22
        },
        modalView: {
          flex: 1,
          margin: 20,
          justifyContent: 'center',  
          alignItems: 'center',   
          backgroundColor: "white",
          borderRadius: 10,
      
          width:'90%',
          shadowColor: "#000",
         
        
        },
        paragraph: {
          margin: 24,
          fontSize: 18,
          fontWeight: 'bold',
          textAlign: 'center',
        },
        modalContainer: {
          flex: 1,
          justifyContent: 'center',
          alignItems: 'center',
          backgroundColor: 'rgba(0, 0, 0, 0.5)',
        },
       
        modalText: {
          fontSize: 18,
          marginBottom: 15,
          textAlign: 'center',
        },
      }); 

    
    